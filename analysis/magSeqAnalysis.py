"""
visualize_mag_678.py
====================
Function:
1. Read **pre-norm** raw continuous sensor stream, split by 450 sampling windows, but without z-score;
2. Directly read .npz window data generated by pipeline with z-score normalization (post-norm);
3. Randomly select 1 window from each label∈{6,7,8} (original SHL annotation), plot
      - mag_x, mag_y, mag_z three-axis time series 3×2 = 6 plots
   (left column: pre-norm, right column: post-norm).
4. Generated PNG saved to ./fig directory and displayed in popup window.

Usage: Ensure
    ├── dataset_root/              # Original SHL-2018 sensors and Label.txt
    ├── order_file.txt             # Order file used for training tasks
    └── processed/*.npz            # Post-norm window file generated by getDataset main program
Modify path variables in script as needed.
"""

import os
import random
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np

# ──────────────────────────────────────────────
# 1. Some utilities and constants from getDataset.py
#    (Direct import would introduce redundant CLI; manually copy needed constants here)
# ──────────────────────────────────────────────
FEATURE_COLS = [
    "acc_x", "acc_y", "acc_z",
    "gra_x", "gra_y", "gra_z",
    "gyr_x", "gyr_y", "gyr_z",
    "lacc_x", "lacc_y", "lacc_z",
    "mag_x", "mag_y", "mag_z",
    "ori_w", "ori_x", "ori_y", "ori_z",
    "pressure",
]
MAG_COL_IDX = [FEATURE_COLS.index(c) for c in ["mag_x", "mag_y", "mag_z"]]
UNKNOWN = -1
WINDOW_SIZE = 450  # Keep consistent with getDataset (450 samples ≈ 4.5 s)


# ──────────────────────────────────────────────
# 2. Pre-norm: continuous stream → split windows (without z-score)
# ──────────────────────────────────────────────
def load_raw_windows(data_root: str, order_file: str, labels=(6, 7, 8)):
    """
    Follow getDataset process to read raw continuous sensor matrix, but **skip z_norm**,
    then split into 450 × 20 windows, return window list and labels for specified labels.
    """
    # Dynamic import functions from getDataset to avoid large copy-paste
    import importlib.util, sys
    gd_path = Path(__file__).parent / "/Users/xiangyifei/Documents/GitHub/MSRLSTM-open-master/utils/getDataset.py"
    spec = importlib.util.spec_from_file_location("getDataset", gd_path)
    gd = importlib.util.module_from_spec(spec)
    sys.modules["getDataset"] = gd
    spec.loader.exec_module(gd)

    # Read continuous stream (without normalization)
    feats, lbls = gd.load_stream(data_root, order_file)      # feats:(T,20); lbls:(T,)
    # label 1-8 → 0-7; we need original labels 6/7/8 ⇒ convert to 5/6/7
    lbls_shift = lbls.astype(int)
    # Split
    segs, seg_lbls = gd.segment(feats, lbls_shift, WINDOW_SIZE, overlap=0.0)
    # Filter UNKNOWN
    mask_known = seg_lbls != UNKNOWN
    segs, seg_lbls = segs[mask_known], seg_lbls[mask_known]

    # Keep only target labels
    raw_windows = []
    raw_labels = []
    for s, l in zip(segs, seg_lbls):
        if l + 1 in labels:          # l is 0-7, +1 restores to original label
            raw_windows.append(s)
            raw_labels.append(l + 1)  # Save as original label
    return np.array(raw_windows), np.array(raw_labels)


# ──────────────────────────────────────────────
# 3. Post-norm: directly read .npz
# ──────────────────────────────────────────────
def load_norm_windows(npz_path: str, labels=(6, 7, 8)):
    """
    Directly read windowed .npz saved by getDataset (already z-scored),
    return windows and labels containing only target labels.
    """
    d = np.load(npz_path)
    x, y = d["x"], d["y"]            # x:(N,450,20) already normalized
    # If label 0-7, need +1 to restore
    y_orig = y + 1 if y.min() == 0 else y
    mask = np.isin(y_orig, labels)
    return x[mask], y_orig[mask]


# ──────────────────────────────────────────────
# 4. Randomly sample windows and plot
# ──────────────────────────────────────────────
def sample_windows(windows, labels, k=1):
    """Randomly sample k windows from each label"""
    samples = {}
    for lab in np.unique(labels):
        idx = np.where(labels == lab)[0]
        if len(idx) == 0:
            continue
        chosen = random.choice(idx) if k == 1 else random.sample(list(idx), k)
        samples[lab] = windows[chosen]
    return samples


def plot_windows(raw_dict, norm_dict, save_dir="fig"):
    os.makedirs(save_dir, exist_ok=True)
    # Ensure order 6,7,8
    label_order = [6, 7, 8]
    fig, axes = plt.subplots(len(label_order), 2, figsize=(12, 9), sharex=True, sharey=False)
    for r, lab in enumerate(label_order):
        # ── Left: raw ──
        ax_raw = axes[r, 0]
        w_raw = raw_dict.get(lab)
        if w_raw is not None:
            ax_raw.plot(w_raw[:, MAG_COL_IDX[0]], label="mag_x")
            ax_raw.plot(w_raw[:, MAG_COL_IDX[1]], label="mag_y")
            ax_raw.plot(w_raw[:, MAG_COL_IDX[2]], label="mag_z")
        ax_raw.set_title(f"Label {lab} | Raw (Unnormalized)")
        ax_raw.set_ylabel("Magnetic Field Value")
        ax_raw.grid(True)

        # ── Right: norm ──
        ax_norm = axes[r, 1]
        w_norm = norm_dict.get(lab)
        if w_norm is not None:
            ax_norm.plot(w_norm[:, MAG_COL_IDX[0]], label="mag_x")
            ax_norm.plot(w_norm[:, MAG_COL_IDX[1]], label="mag_y")
            ax_norm.plot(w_norm[:, MAG_COL_IDX[2]], label="mag_z")
        ax_norm.set_title(f"Label {lab} | Z-score Normalized")
        ax_norm.grid(True)

        if r == 0:
            axes[0, 0].legend(loc="upper right")

    plt.suptitle("Magnetometer Three-axis Time Series Comparison (Left: Pre-norm, Right: Post-norm)", fontsize=15)
    plt.tight_layout(rect=[0, 0.03, 1, 0.97])
    out_png = Path(save_dir) / "mag_678_raw_vs_norm.png"
    plt.savefig(out_png, dpi=300)
    plt.show()
    print(f"Figure saved to {out_png.resolve()}")


# ──────────────────────────────────────────────
# 5. Main process
# ──────────────────────────────────────────────
if __name__ == "__main__":
    # =======★ Modify paths according to actual situation ↓ ★=======
    DATA_ROOT = "/Users/xiangyifei/Documents/HPC_Efficient_Computing_System/dataset/SHL_2018"                 # Directory containing sensors and Label.txt
    ORDER_TXT = "/Users/xiangyifei/Documents/HPC_Efficient_Computing_System/dataset/SHL_2018/Train_order.txt"
    NPZ_PATH  = "/Users/xiangyifei/Documents/GitHub/MSRLSTM-open-master/processed/all_data_train_0.8_window_450_overlap_0.0.npz"
    # ====================================

    # 1. Unnormalized windows
    raw_x, raw_y = load_raw_windows(DATA_ROOT, ORDER_TXT, labels=(6, 7, 8))
    raw_samples  = sample_windows(raw_x, raw_y, k=1)

    # 2. Normalized windows
    norm_x, norm_y = load_norm_windows(NPZ_PATH, labels=(6, 7, 8))
    norm_samples   = sample_windows(norm_x, norm_y, k=1)

    # 3. Plot
    plot_windows(raw_samples, norm_samples)
